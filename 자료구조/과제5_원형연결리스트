#include <iostream>
using namespace std;

class CNode {
public:
	int data;
	CNode* link;
};

CNode* Head = NULL;

/*
//º¯º≠∞° πŸ≤Ò(ø™º¯)
void insert_node(Node *new_node){
	new_node->link = Head;
	Head = new_node;
}
*/

//º¯º≠¥Î∑Œ
void insert_node_at_front(CNode* new_node) {
	if (Head == NULL) {
		new_node->link = new_node;
		Head = new_node;
	}
	else {
		new_node->link = Head->link;
		Head->link = new_node;
		//Head = new_node;
	}
}

void insert_node_at_rear(CNode* new_node) {
	if (Head == NULL) {
		new_node->link = new_node;
		Head = new_node;
	}
	else {
		new_node->link = Head->link;
		Head->link = new_node;
		Head = new_node;
	}
}

void delete_node(int key){
	if (Head == NULL) return;

	else if (Head->link == Head && Head->data == key) Head = NULL;
	else {
		CNode* pre = Head;
		do {
			if (pre->link->data == key) {
				CNode* removed = pre->link;
				pre->link = removed->link; //removed ∞«≥ ∂‹
				if (Head == removed) Head = pre;
				return;
			}
			pre = pre->link;
		} while (pre != Head);
	}
}

/*
void reverse_list() {
	Node* p, * q, * r;
	p = Head;
	q = NULL;
	while (p != NULL) {
		r = q; 
		q = p;
		p = p->link;
		q->link = r;
	}
	Head = q;
}
*/

void print_list() {
	cout << "ø¯«¸ø¨∞·∏ÆΩ∫∆Æ ∞·∞˙" << endl;

	if (Head == NULL) return;
	else {
		CNode* ptr = Head;
		do {
			cout << ptr->link->data << endl;
			ptr = ptr->link;
		} while (ptr != Head);
	}
}

void main(){
	int num;
	cout << "¿‘∑¬«“ µ•¿Ã≈Õ¿« ∞≥ºˆ¥¬ ?  ";
	cin >> num;

	for (int i = 0; i < num; i++) {
		//≥ÎµÂ ª˝º∫
		CNode* new_node = new CNode;

		//¿‘∑¬ πﬁ¿∫ ∞™¿ª ¿˙¿Â
		int data;
		cin >> data;
		new_node->data = data;
		new_node->link = NULL;
	
		//±‚¡∏ ø¨∞·∏ÆΩ∫∆Æø° √ﬂ∞°
		//insert_node(new_node);
		insert_node_at_rear(new_node);


	}

	print_list();

	
	cout << "ªË¡¶«“ ≥ÎµÂ¿« ∞™¿∫? ";
	int key;
	cin >> key;

	delete_node(key);
	

	print_list();
	
}
